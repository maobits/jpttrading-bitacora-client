import axios from "axios";
import connectionService from "@/hooks/recipes/ConnectionService";
import GeneralToken from "@/store/config/GeneralToken.json"; // Importa el token general

interface StockData {
  symbol: string;
  price: number;
  currency: string;
  marketTime: string;
}

interface HistoricalData {
  date: string;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
}

const YFinanceService = {
  // Obtener cotizaci√≥n actual
  async getQuote(symbol: string): Promise<StockData | string> {
    try {
      console.log(`üöÄ Solicitando cotizaci√≥n para el s√≠mbolo: ${symbol}`);

      const { ip, port } = connectionService.getServerConfig();
      console.log("üåê Configuraci√≥n del servidor obtenida:", { ip, port });

      const baseURL = `http://${ip}:${port}/api/yfinance/quote/${symbol}`;
      console.log(`üîó Construyendo URL para la solicitud: ${baseURL}`);

      const response = await axios.get(baseURL, {
        headers: {
          "x-api-key": GeneralToken.token, // Incluye el token en el encabezado
        },
      });
      console.log("‚úÖ Cotizaci√≥n obtenida con √©xito:", response.data);

      return response.data;
    } catch (error: any) {
      console.error(
        `‚ùå Error al obtener la cotizaci√≥n para ${symbol}:`,
        error.message
      );
      console.error("Detalles del error:", error.response?.data || error);

      return "No disponible";
    }
  },

  // Obtener datos hist√≥ricos
  async getHistoricalData(
    symbol: string,
    period: string = "1mo"
  ): Promise<HistoricalData[] | string> {
    try {
      console.log(
        `üöÄ Solicitando datos hist√≥ricos para el s√≠mbolo: ${symbol} con periodo: ${period}`
      );

      const { ip, port } = connectionService.getServerConfig();
      console.log("üåê Configuraci√≥n del servidor obtenida:", { ip, port });

      const baseURL = `http://${ip}:${port}/api/yfinance/historical/${symbol}`;
      console.log(`üîó Construyendo URL para la solicitud: ${baseURL}`);

      const response = await axios.get(baseURL, {
        params: { period },
        headers: {
          "x-api-key": GeneralToken.token, // Incluye el token en el encabezado
        },
      });
      console.log("‚úÖ Datos hist√≥ricos obtenidos con √©xito:", response.data);

      return response.data;
    } catch (error: any) {
      console.error(
        `‚ùå Error al obtener datos hist√≥ricos para ${symbol}:`,
        error.message
      );
      console.error("Detalles del error:", error.response?.data || error);

      return "No disponible";
    }
  },

  // Buscar activos financieros
  async search(query: string): Promise<any> {
    try {
      console.log(`üöÄ Iniciando b√∫squeda para el t√©rmino: ${query}`);

      const { ip, port } = connectionService.getServerConfig();
      console.log("üåê Configuraci√≥n del servidor obtenida:", { ip, port });

      const baseURL = `http://${ip}:${port}/api/yfinance/search`;
      console.log(`üîó Construyendo URL para la b√∫squeda: ${baseURL}`);

      const response = await axios.get(baseURL, {
        params: { query },
        headers: {
          "x-api-key": GeneralToken.token, // Incluye el token en el encabezado
        },
      });
      console.log(
        "‚úÖ Resultados de b√∫squeda obtenidos con √©xito:",
        response.data
      );

      return response.data;
    } catch (error: any) {
      console.error(`‚ùå Error al buscar el t√©rmino "${query}":`, error.message);
      console.error("Detalles del error:", error.response?.data || error);

      throw new Error("No se pudo completar la b√∫squeda.");
    }
  },
};

export default YFinanceService;
